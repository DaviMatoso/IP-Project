import pygame
import random

# Initialize Pygame
pygame.init()

font = pygame.font.Font(None, 74)
small_font = pygame.font.Font(None, 36)

# Screen dimensions
WIDTH, HEIGHT = 1440, 810
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Top-Down Shooter")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)

dano=3000
# Player settings
player_size = 66
player_size2 = 60
player_speed = 10

# Bullet settings
bullet_size = 2
bullet_speed = 20

#enemy settings
enemy_size = 50
enemy_speed = 2

#projetil sttings
projetil_size=25
projetil_speed=12


# Player class
class Player:
    def __init__(self):
        self.rect = pygame.Rect(WIDTH // 2, HEIGHT // 2, player_size2, player_size)

    def move(self, dx, dy):
        self.rect.x += dx * player_speed
        self.rect.y += dy * player_speed
        self.rect.clamp_ip(screen.get_rect())  # Keep player within screen bounds

# Bullet class
class Bullet:
    def __init__(self, x, y):
        self.rect = pygame.Rect(x, y, bullet_size, bullet_size)

    def move(self):
        self.rect.y -= bullet_speed

class projetil:
    def __init__(self):
        self.rect = pygame.Rect(random.randint(0, WIDTH - projetil_size), 0, projetil_size, projetil_size)
    
    def move(self):
        self.rect.y += projetil_speed

# Enemy class
class Enemy:
    def __init__(self):
        self.rect = pygame.Rect(random.randint(0, WIDTH - enemy_size), 0, enemy_size, enemy_size)

    def move(self):
        self.rect.y += enemy_speed

class rectangulobixa:
    def __init__(self):
        self.rect = pygame.Rect(570, 1, 300, 150)


def game_over_screen(rodando):
    keys = pygame.key.get_pressed()
    screen.fill(BLACK)
        
    # Renderizar textos
    text = font.render("GAME OVER", True, RED)
    text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT // 3))
    
    retry_text = small_font.render("Pressione ESPAÃ‡O para jogar novamente", True, WHITE)
    retry_rect = retry_text.get_rect(center=(WIDTH // 2, HEIGHT // 2))

    quit_text = small_font.render("Pressione ESC para sair", True, WHITE)
    quit_rect = quit_text.get_rect(center=(WIDTH // 2, HEIGHT // 1.5))

    # Desenhar na tela
    screen.blit(text, text_rect)
    screen.blit(retry_text, retry_rect)
    screen.blit(quit_text, quit_rect)
    
    pygame.display.flip()
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    pygame.quit()
                    return
                if event.key == pygame.K_SPACE:
                    main()
                    return


# Main game loop
def main():
    clock = pygame.time.Clock()
    player = Player()
    dano=3000
    bullets = []
    enemies = []
    proj=[]
    score = 0
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
    
        keys = pygame.key.get_pressed()
        dx = keys[pygame.K_d] - keys[pygame.K_a]
        dy = keys[pygame.K_s] - keys[pygame.K_w]
        player.move(dx, dy)

        # Shooting bullets
        if keys[pygame.K_SPACE]:
                bullets.append(Bullet(player.rect.centerx, player.rect.top))

        # Move bullets
        for bullet in bullets[:]:
            bullet.move()
            if bullet.rect.bottom < 0:
                bullets.remove(bullet)

        if random.randint(1, 5) == 1:  # Adjust spawn rate
            proj.append(projetil())

        for projet in proj[:]:
            projet.move()
            if projet.rect.top>HEIGHT:
                proj.remove(projet)

        # Spawn enemies
        if random.randint(1, 3000) == 1:  # Adjust spawn rateaa
            enemies.append(Enemy())


        # Move enemies
        for enemy in enemies[:]:
            enemy.move()
            if enemy.rect.top > HEIGHT:
                enemies.remove(enemy)
                score += 1  # Increment score for each enemy that goes off-screen

        # Check for collisions
        for bullet in bullets[:]:
            for enemy in enemies[:]:
                if bullet.rect.colliderect(enemy.rect):
                    bullets.remove(bullet)
                    enemies.remove(enemy)
                    score += 5  # Increment score for destroying an enemy
                    break
        rect=[]
        if dano>0:
            rect.append(rectangulobixa())
        for bullet in bullets[:]:
            for rec in rect:
                if bullet.rect.colliderect(rec.rect):
                    dano-=10



        # Drawing
        screen.fill(WHITE)
        pygame.draw.rect(screen, BLACK, player.rect)
        for bullet in bullets:
            pygame.draw.rect(screen, RED, bullet.rect)
        for enemy in enemies:
            pygame.draw.rect(screen, BLACK, enemy.rect)
        for projec in proj:
            pygame.draw.rect(screen, BLACK, projec.rect)
        for re in rect:
            pygame.draw.rect(screen, BLACK, re.rect)

        # Display score
        font = pygame.font.Font(None, 36)
        score_text = font.render(f'Score: {score}', True, BLACK)
        screen.blit(score_text, (10, 10))

        for projes in proj:
            if player.rect.colliderect(projes.rect):
                game_over_screen(running)

        pygame.display.flip()
        clock.tick(30)  # Frame rate

    pygame.quit()

if __name__ == "__main__":
    main()