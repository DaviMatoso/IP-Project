#Imports
import pygame
import random

#Comando pygame (NAO TOQUE)
pygame.init()

font = pygame.font.Font(None, 74)
small_font = pygame.font.Font(None, 36)

#Tela 
WIDTH, HEIGHT = 1440, 810
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Top-Down Shooter")

#Cores
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)

dano = 3000
#player config
player_size = 66
player_size2 = 60
player_speed = 10

#bullet config
bullet_size = 21
bullet_speed = 20

#enemy settings
enemy_size = 50
enemy_speed = 2

#projetil settings
projetil_size = 20
projetil_speed = 12

#player class
class Player:
    def __init__(self):
        self.image = pygame.image.load("spritesGT/Player_idle.png")  # Carregar imagem do jogador
        self.image = pygame.transform.scale(self.image, (player_size2, player_size))  # Ajustar o tamanho da imagem
        self.rect = self.image.get_rect(center=(WIDTH // 2, HEIGHT // 2))  # Usar o retângulo da imagem

    def move(self, dx, dy):
        self.rect.x += dx * player_speed    # Player andar em x
        self.rect.y += dy * player_speed    # Player andar em y
        self.rect.clamp_ip(150, 291, 1140, 453)  # Mantém o jogador dentro do local "andavel"


#bullet class
class Bullet:
    def __init__(self, x, y):
        self.image = pygame.image.load("spritesGT/1 pixelado.webp")  # Carregar imagem do jogador
        self.image = pygame.transform.scale(self.image, (bullet_size, bullet_size))  # Ajustar o tamanho da imagem
        self.rect = self.image.get_rect(center=(x, y))  # Usar o retângulo da imagem

    def move(self):
        self.rect.y -= bullet_speed #Bullet sai do bloco player e vai ao além pra cima

#projetil class
class Projetil:
    def __init__(self):
        self.rect = pygame.Rect(random.randint(0, WIDTH - projetil_size), 0, projetil_size, projetil_size)
    
    def move(self):
        self.rect.y += projetil_speed #Projetil cai pro inferno

#enemy class
class Enemy:
    def __init__(self):
        self.rect = pygame.Rect(random.randint(0, WIDTH - enemy_size), 0, enemy_size, enemy_size)

    def move(self):
        self.rect.y += enemy_speed #emeny cai pro inferno

#navin class
class NAVIN:
    def __init__(self):
        self.rect = pygame.Rect(570, 1, 300, 150)

#tela de gameover (sera completamente alterado quando o sprite de tela de gameover for inserido)
def game_over_screen(rodando):
    keys = pygame.key.get_pressed()
    screen.fill(BLACK)
        
    # Renderizar textos
    text = font.render("GAME OVER", True, RED)
    text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT // 3))
    
    retry_text = small_font.render("Pressione ESPAÇO para jogar novamente", True, WHITE)
    retry_rect = retry_text.get_rect(center=(WIDTH // 2, HEIGHT // 2))

    quit_text = small_font.render("Pressione ESC para sair", True, WHITE)
    quit_rect = quit_text.get_rect(center=(WIDTH // 2, HEIGHT // 1.5))

    # Desenhar na tela
    screen.blit(text, text_rect)
    screen.blit(retry_text, retry_rect)
    screen.blit(quit_text, quit_rect)
    
    pygame.display.flip()
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    pygame.quit()
                    return
                if event.key == pygame.K_SPACE:
                    main()
                    return


# Main game loop
def main():
    # Carregar a imagem de fundo
    background = pygame.image.load("spritesGT/Map_1.png")
    background = pygame.transform.scale(background, (WIDTH, HEIGHT))  # Ajustar o tamanho da imagem do fundo

    clock = pygame.time.Clock()
    player = Player()
    dano = 3000     #vida do navin
    #Lista de objetos moviveis gerados
    bullets = []
    enemies = []
    proj = []
    score = 0
    running = True


    while running:      #LOOP DE RODAR
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
    
        #Teclas de movi do player
        keys = pygame.key.get_pressed()
        dx = keys[pygame.K_d] - keys[pygame.K_a]
        dy = keys[pygame.K_s] - keys[pygame.K_w]
        player.move(dx, dy)


        #Spawn de bullet
        if keys[pygame.K_SPACE]:
                bullets.append(Bullet(player.rect.centerx, player.rect.top))

        #Movimento de bullet
        for bullet in bullets[:]:
            bullet.move()
            if bullet.rect.bottom < 0:
                bullets.remove(bullet)

        #Spawn projetil
        if random.randint(1, 5) == 1:
            proj.append(Projetil())

        #Movimento de projetil
        for projet in proj[:]:
            projet.move()
            if projet.rect.top > HEIGHT:
                proj.remove(projet)

        #Spawn de enemies
        if random.randint(1, 30000) == 1: 
            enemies.append(Enemy())

        #Movimento de enemies
        for enemy in enemies[:]:
            enemy.move()
            if enemy.rect.top > HEIGHT:
                enemies.remove(enemy)
                score += 1 

        #Colisão de enemies com bullet
        for bullet in bullets[:]:
            for enemy in enemies[:]:
                if bullet.rect.colliderect(enemy.rect):
                    bullets.remove(bullet)
                    enemies.remove(enemy)
                    score += 5  
                    break

        #Spawn nivan (NÃO TOQUE NESSA LIST)
        navins = []
        if dano > 0:
            navins.append(NAVIN())

        #Colisão bullet com navin
        for bullet in bullets[:]:
            for navin in navins:
                if bullet.rect.colliderect(navin.rect):
                    dano -= 100
                    bullets.remove(bullet)

        #Desenho player, fundo, bullet
        screen.blit(background, (0, 0))  #
        screen.blit(player.image, player.rect)  
        for bullet in bullets:
            screen.blit(bullet.image, bullet.rect)
        for enemy in enemies:
            pygame.draw.rect(screen, BLACK, enemy.rect)
        for projec in proj:
            pygame.draw.rect(screen, BLACK, projec.rect)
        for nav in navins:
            pygame.draw.rect(screen, BLACK, nav.rect)

        #Score (ADD VIDA, ARMA, VIDA NAVIN)
        font = pygame.font.Font(None, 36)
        score_text = font.render(f'Score: {score}', True, BLACK)
        screen.blit(score_text, (10, 10))

        #Tela de gameover (cogitar sistema de vida no lugar do hit kill)
        for projes in proj:
            if player.rect.colliderect(projes.rect):
                game_over_screen(running)

        #Comando pygame (NAO TOQUE)
        pygame.display.flip()
        clock.tick(30)

    #NAO TOQUE
    pygame.quit()

#NAO TOQUE
main()
